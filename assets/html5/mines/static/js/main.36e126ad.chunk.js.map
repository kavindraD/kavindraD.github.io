{"version":3,"sources":["screen/StartScreen.js","component/Cell.js","component/gameBoard.js","screen/GameScreen.js","screen/EndScreen.js","App.js","serviceWorker.js","actions/index.js","reducers/index.js","index.js"],"names":["StartScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","height","width","mines","handleGameStart","difficulty","document","querySelector","value","console","log","JSON","stringify","handleClick","react_default","a","createElement","className","id","onClick","Component","Cell","ref","node","setState","clientRect","getBoundingClientRect","isRevealed","isMine","neighbour","isFlagged","screenWidth","s","getCellWH","defineProperty","style","onContextMenu","cMenu","getValue","Board","boardData","initBoardData","gameWon","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","i","j","x","y","isEmpty","plantMines","getNeighbours","randomx","randomy","minesPlanted","getRandomNumber","_this2","updatedData","mine","traverseBoard","el","_this3","revealEmpty","win","revealBoard","alert","getHidden","length","gameWin","getFlags","e","preventDefault","getMines","FlagArray","_this4","key","Cell_Cell","handleCellClick","_handleContextMenu","nextProps","minWidth","getstyle","renderBoard","React","GameScreen","wongame","handleGameEnd","_ref","gameBoard_Board","bind","EndScreen","handleGameReStart","playNextGame","msg","App","screen","changeState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","LEADERBOARD_LOADED","LOGGED_IN","MOVE_OBJECTS","START_GAME","SHOOT","initialState","angle","gameState","started","kills","lives","flyingObjects","lastObjectCreatedAt","Date","currentPlayer","players","cannonBalls","reducer","arguments","undefined","action","type","objectSpread","player","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.36e126ad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class StartScreen extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n   state = {\r\n        height: 8,\r\n        width: 8,\r\n        mines: 10,\r\n    };\r\n\r\n    handleGameStart = () => {\r\n        let difficulty = document.querySelector(\"#level_select\");\r\n        if (difficulty.value === \"beginner\") {\r\n            /*this.setState({\r\n                height: 8,\r\n                width: 8,\r\n                mines: 10,\r\n            });*/\r\n            this.state = {\r\n                height: 8,\r\n                width: 8,\r\n                mines: 10,\r\n            }\r\n        }\r\n        if (difficulty.value === \"intermediate\") {\r\n            /*this.setState({\r\n                height: 12,\r\n                width: 12,\r\n                mines: 20,\r\n            });*/\r\n            this.state = {\r\n                height: 12,\r\n                width: 12,\r\n                mines: 20,\r\n            };\r\n        }\r\n        if (difficulty.value === \"expert\") {\r\n            /*this.setState({\r\n                height: 16,\r\n                width: 16,\r\n                mines: 40,\r\n            });*/\r\n            this.state = {\r\n                height: 16,\r\n                width: 16,\r\n                mines: 40,\r\n            }\r\n        }\r\n        console.log('selected level ' +difficulty.value + \" state data as \" + JSON.stringify(this.state)) ;\r\n        this.props.handleClick('GameScreen',this.state);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"gameStart\">\r\n            <div className=\"game-info\">\r\n                <div className=\"instructions\">\r\n                    <h4>Rules</h4>\r\n                    <p>You are presented with a board of squares. Some squares contain mines (bombs), others don't.</p> \r\n                    <p>If you click on a square containing a bomb, you lose.</p>\r\n                    <p>If you manage to click all the squares (without clicking on any bombs) or flag all the mines, you win.</p>\r\n                    <p>Clicking a square which doesn't have a bomb reveals the number of neighbouring squares containing bombs.</p>\r\n                    <p>Use this information plus some guess work to avoid the bombs.</p>\r\n                    <p>To open a square, point at the square and click on it.</p> \r\n                    <p>To mark a square you think is a bomb, point and right-click.</p>\r\n                    <p>Its free game and hence, no scoring available for this game.</p>\r\n                </div>\r\n               <h4>Select a level and click \"start\"</h4>\r\n                <span className=\"info\">Level:\r\n                    <select id=\"level_select\">\r\n                        <option value=\"beginner\"> Beginner </option>\r\n                        <option value=\"intermediate\"> Intermediate </option>\r\n                        <option value=\"expert\"> Expert </option>\r\n                    </select>\r\n                </span>\r\n                <br/><br/><br/><br/>\r\n                <button className='screen-button' onClick={this.handleGameStart}>Start</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\n\nexport default class Cell extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          clientRect: {},\n        };\n      }\n    //s = {width:'4%', height:'4vh'};\n    ref = node => node && this.setState({clientRect: node.getBoundingClientRect()});\n\n    getValue(){\n\n        \n\n        //{\"x\":8,\"y\":8,\"width\":50,\"height\":50,\"top\":8,\"right\":58,\"bottom\":58,\"left\":8}\n       // const shape = \"🚩\";\n        //<svg><rect x={0} y={0}  width={this.state.clientRect.width} height={this.state.clientRect.height} fill=\"olive\" /></svg>;\n        //<svg><circle cx={this.state.clientRect.width/2} cy={this.state.clientRect.height/2} r={this.state.clientRect.width/2} fill=\"red\" /></svg>;\n        //<svg><rect x={0} y={0}  width={this.state.clientRect.width} height={this.state.clientRect.height} fill=\"olive\" /></svg>;\n        //<svg><rect x={0} y={0}  width={25} height={25} fill=\"red\" /></svg>;\n        //<svg><circle cx={10} cy={10} r={10} fill=\"red\" /></svg>;\n        if (!this.props.value.isRevealed){\n            return this.props.value.isFlagged ? '🚩' : null;//Flag\n        }\n        if (this.props.value.isMine) {\n            return '💣';//Bomb\n            //\"🚩\"\n        }\n        if(this.props.value.neighbour === 0 ){\n            return null;\n        }\n        return this.props.value.neighbour;\n    }\n    \n    getCellWH(){\n        let s = {width:'4%', height:'4vh'};\n        console.log(this.props.screenWidth + 'this.props.screenWidth');\n        if(this.props.screenWidth > 700){\n            if(this.props.value.width === 8){\n                this.s= {width:'12%', height:'10vh'};\n            } else if(this.props.value.width === 12){\n                this.s= {width:'8%', height:'7vh'};\n            } else if(this.props.value.width === 16){\n                this.s= {width:'6%', height:'5vh'};\n            } \n            this.s['font-size'] = '24pt';\n            this.s['padding-top'] = '2%';\n        } else {\n            if(this.props.value.width === 8){\n                this.s= {width:'11%', height:'9vh'};\n            } else if(this.props.value.width === 12){\n                this.s= {width:'7%', height:'6vh'};\n            } else if(this.props.value.width === 16){\n                this.s= {width:'5%', height:'4vh'};\n            } \n            this.s['font-size'] = '16pt';\n            this.s['padding-top'] = '2%';\n        }\n        return this.s;\n    }\n\n    render(){\n        let className = \"cell\" + (this.props.value.isRevealed ? \"\" : \" hidden\") + (this.props.value.isMine ? \" is-mine\" : \"\") + (this.props.value.isFlagged ? \" is-flag\" : \"\");\n        //className = \"cell is-mine\";\n        //const w='3%';//100/this.props.width+'%';\n       // const h='3vh';//100/this.props.height+\"vh\";\n        const s = this.getCellWH();\n        //{width:w, height:h};\n        return (\n            <div style={s} ref=\"cell\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu} ref={this.ref}>\n                {this.getValue()}\n            </div>\n        );\n    }\n}\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default class Board extends React.Component {\r\n    \r\n    state = {\r\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n        gameWon: false,\r\n        mineCount: this.props.mines,\r\n        clientRect:{},\r\n    };\r\n\r\n    ref = node => node && this.setState({clientRect: node.getBoundingClientRect()});\r\n\r\n    /* Helper Functions */\r\n\r\n    // get mines\r\n    getMines(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isMine) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Flags\r\n    getFlags(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isFlagged) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Hidden cells\r\n    getHidden(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (!dataitem.isRevealed) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get random number given a dimension\r\n    getRandomNumber(dimension) {\r\n        // return Math.floor(Math.random() * dimension);\r\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n    }\r\n\r\n    // Gets initial board data\r\n    initBoardData(height, width, mines) {\r\n        let data = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                    width:this.props.width,\r\n                    height:this.props.height,\r\n                };\r\n            }\r\n        }\r\n        data = this.plantMines(data, height, width, mines);\r\n        data = this.getNeighbours(data, height, width);\r\n        console.log(data);\r\n        return data;\r\n    }\r\n\r\n    // plant mines on the board\r\n    plantMines(data, height, width, mines) {\r\n        let randomx, randomy, minesPlanted = 0;\r\n\r\n        while (minesPlanted < mines) {\r\n            randomx = this.getRandomNumber(width);\r\n            randomy = this.getRandomNumber(height);\r\n            if (!(data[randomx][randomy].isMine)) {\r\n                data[randomx][randomy].isMine = true;\r\n                minesPlanted++;\r\n            }\r\n        }\r\n\r\n        return (data);\r\n    }\r\n\r\n    // get number of neighbouring mines for each board cell\r\n    getNeighbours(data, height, width) {\r\n        let updatedData = data, index = 0;\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (data[i][j].isMine !== true) {\r\n                    let mine = 0;\r\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\r\n                    area.map(value => {\r\n                        if (value.isMine) {\r\n                            mine++;\r\n                        }\r\n                    });\r\n                    if (mine === 0) {\r\n                        updatedData[i][j].isEmpty = true;\r\n                    }\r\n                    updatedData[i][j].neighbour = mine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (updatedData);\r\n    };\r\n\r\n    // looks for neighbouring cells and returns them\r\n    traverseBoard(x, y, data) {\r\n        const el = [];\r\n\r\n        //up\r\n        if (x > 0) {\r\n            el.push(data[x - 1][y]);\r\n        }\r\n\r\n        //down\r\n        if (x < this.props.height - 1) {\r\n            el.push(data[x + 1][y]);\r\n        }\r\n\r\n        //left\r\n        if (y > 0) {\r\n            el.push(data[x][y - 1]);\r\n        }\r\n\r\n        //right\r\n        if (y < this.props.width - 1) {\r\n            el.push(data[x][y + 1]);\r\n        }\r\n\r\n        // top left\r\n        if (x > 0 && y > 0) {\r\n            el.push(data[x - 1][y - 1]);\r\n        }\r\n\r\n        // top right\r\n        if (x > 0 && y < this.props.width - 1) {\r\n            el.push(data[x - 1][y + 1]);\r\n        }\r\n\r\n        // bottom right\r\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\r\n            el.push(data[x + 1][y + 1]);\r\n        }\r\n\r\n        // bottom left\r\n        if (x < this.props.height - 1 && y > 0) {\r\n            el.push(data[x + 1][y - 1]);\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n    // reveals the whole board\r\n    revealBoard() {\r\n        let updatedData = this.state.boardData;\r\n        updatedData.map((datarow) => {\r\n            datarow.map((dataitem) => {\r\n                dataitem.isRevealed = true;\r\n            });\r\n        });\r\n        this.setState({\r\n            boardData: updatedData\r\n        })\r\n    }\r\n\r\n    /* reveal logic for empty cell */\r\n    revealEmpty(x, y, data) {\r\n        let area = this.traverseBoard(x, y, data);\r\n        area.map(value => {\r\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n                data[value.x][value.y].isRevealed = true;\r\n                if (value.isEmpty) {\r\n                    this.revealEmpty(value.x, value.y, data);\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n\r\n    }\r\n\r\n    // Handle User Events\r\n\r\n    handleCellClick(x, y) {\r\n        let win = false;\r\n\r\n        // check if revealed. return if true.\r\n        if (this.state.boardData[x][y].isRevealed) return null;\r\n\r\n        // check if mine. game over if true\r\n        if (this.state.boardData[x][y].isMine) {\r\n            this.revealBoard();\r\n            alert(\"game over\");\r\n        }\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = false;\r\n        updatedData[x][y].isRevealed = true;\r\n\r\n        if (updatedData[x][y].isEmpty) {\r\n            updatedData = this.revealEmpty(x, y, updatedData);\r\n        }\r\n\r\n        if (this.getHidden(updatedData).length === this.props.mines) {\r\n            win = true;\r\n            this.revealBoard();\r\n            this.props.gameWin(true);\r\n            alert(\"You Win\");\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    _handleContextMenu(e, x, y) {\r\n        e.preventDefault();\r\n        let updatedData = this.state.boardData;\r\n        let mines = this.state.mineCount;\r\n        let win = false;\r\n\r\n        // check if already revealed\r\n        if (updatedData[x][y].isRevealed) return;\r\n\r\n        if (updatedData[x][y].isFlagged) {\r\n            updatedData[x][y].isFlagged = false;\r\n            mines++;\r\n        } else {\r\n            updatedData[x][y].isFlagged = true;\r\n            mines--;\r\n        }\r\n\r\n        if (mines === 0) {\r\n            const mineArray = this.getMines(updatedData);\r\n            const FlagArray = this.getFlags(updatedData);\r\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\r\n            if (win) {\r\n                this.revealBoard();\r\n                this.props.gameWin(true);\r\n                alert(\"You Win\");\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: mines,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    renderBoard(data) {\r\n        return data.map((datarow) => {\r\n            return datarow.map((dataitem) => {\r\n                return (\r\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\r\n                        <Cell\r\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\r\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\r\n                            value={dataitem}\r\n                            screenWidth={this.state.clientRect.width}\r\n                        />\r\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\r\n                    </div>);\r\n            })\r\n        });\r\n\r\n    }\r\n    // Component methods\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\r\n                gameWon: false,\r\n                mineCount: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n    getstyle(){\r\n        let s = {minWidth:'150px'};\r\n        /*if(this.props.width === 8){\r\n            s = {minWidth:'450px'};\r\n        } else if(this.props.width === 12){\r\n            s = {minWidth:'450px'};\r\n        } else if(this.props.width === 16){\r\n            s = {minWidth:'450px'};\r\n        } */\r\n        //console.log(this.state.clientRect.width + \" this.state.clientRect.width \");\r\n        return s\r\n    }\r\n\r\n    render() {\r\n        const s=this.getstyle();\r\n        return (\r\n            <div className=\"board\" ref={this.ref}>\r\n                {/*<div className=\"game-info\">\r\n                    <span className=\"info\">mines: {this.state.mineCount}</span><br />\r\n                    <span className=\"info\">{this.state.gameWon ? \"You Win\" : \"\"}</span>\r\n        </div>*/}\r\n        <div className='start' width={this.state.clientRect.width/10 + 'px'}></div><div className='board' style={s} width={8 * this.state.clientRect.width/10 + 'px'}>{ this.renderBoard(this.state.boardData)}</div><div className='end' width={this.state.clientRect.width/10 + 'px'}></div></div>\r\n            \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport GameBoard from '../component/gameBoard';\r\n//import PathFinder from '../component/PathFinder';\r\n\r\nexport default class GameScreen extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        height: 8,\r\n        width: 8,\r\n        mines: 10,\r\n        wongame: false,\r\n    };\r\n\r\n   wongame = (data) => {\r\n        this.state.wongame = data;\r\n   }\r\n\r\n    handleGameEnd = () => {\r\n        this.props.handleClick('EndScreen',this.state);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('data from parane' + JSON.stringify(nextProps))\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                height: nextProps.height,\r\n                width: nextProps.width,\r\n                mines: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { height, width, mines } = (this.props.data) ? this.props.data : this.state;\r\n        console.log('data from parent is ' + JSON.stringify(this.props.data))\r\n        return (\r\n            <div className=\"game\">\r\n            <div className=\"game-info\">\r\n               <GameBoard height={height} width={width} mines={mines} gameWin={this.wongame.bind(this)}/>\r\n               <br/><br/>\r\n                <button className='screen-button'  onClick={this.handleGameEnd}>End</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nexport default class EndScreen extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    handleGameReStart = () => {\r\n        this.props.handleClick('StartScreen')\r\n    }\r\n    playNextGame = () => {\r\n        this.props.handleClick('GameScreen')\r\n    }\r\n   \r\n    render(){\r\n        const msg = this.props.data.wongame ? 'Congratulations You win' : 'OOOps you loos';\r\n        return (\r\n           \r\n            <div className=\"gameEnd\">\r\n            <div className=\"game-info\">\r\n                <div className=\"instructions\">\r\n                    <h4>{msg}</h4>\r\n                    <p>Click on Play Next to try Again.</p>\r\n                    <p>Or Restart and select the game level and continue again.</p>\r\n                    <p>This game will not add or deduce any score to your final credit.</p>\r\n                </div>\r\n                <br/><br/><br/><br/>\r\n                <button className='screen-button' onClick={this.playNextGame}>Play Next</button>\r\n                <button className='screen-button' onClick={this.handleGameReStart}>Restart</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport StartScreen from './screen/StartScreen';\nimport GameScreen from './screen/GameScreen';\nimport EndScreen from './screen/EndScreen';\n\nclass App extends Component {\n\n    state = {\n        screen:StartScreen,\n        data : {}\n    };\n\n    constructor(props){\n        super(props);\n    }\n\n    changeState(screen,data){\n        console.log('data ' + JSON.stringify(data));\n        switch(screen){\n            case \"StartScreen\":\n                this.state.screen = StartScreen;\n                this.state.data = data;\n                break;\n            case \"EndScreen\":\n                this.state.screen = EndScreen;\n                this.state.data = data;\n                break;\n            case \"GameScreen\":\n                this.state.screen = GameScreen;\n                this.state.data = data;\n                break;\n        }\n        this.setState(this.state);\n    }\n\n    render() {\n        return (\n        <center>\n            < this.state.screen handleClick={this.changeState.bind(this)} data={this.state.data} />\n        </center>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const LEADERBOARD_LOADED = 'LEADERBOARD_LOADED';\nexport const LOGGED_IN = 'LOGGED_IN';\nexport const MOVE_OBJECTS = 'MOVE_OBJECTS';\nexport const START_GAME = 'START_GAME';\nexport const SHOOT = 'SHOOT';\n\nexport const leaderboardLoaded = players => ({\n  type: LEADERBOARD_LOADED,\n  players,\n});\n\nexport const loggedIn = player => ({\n  type: LOGGED_IN,\n  player,\n});\n\nexport const moveObjects = mousePosition => ({\n  type: MOVE_OBJECTS,\n  mousePosition,\n});\n\nexport const startGame = () => ({\n  type: START_GAME,\n});\n\nexport const shoot = (mousePosition) => ({\n  type: SHOOT,\n  mousePosition,\n});\n","import {\n  LEADERBOARD_LOADED, LOGGED_IN,\n  MOVE_OBJECTS, SHOOT, START_GAME\n} from '../actions';\n//import moveObjects from './moveObjects';\n//import startGame from './startGame';\n//import shoot from './shoot';\n\nconst initialGameState = {\n  started: false,\n  kills: 0,\n  lives: 3,\n  flyingObjects: [],\n  lastObjectCreatedAt: new Date(),\n  currentPlayer: null,\n  players: null,\n  cannonBalls: [],\n};\n\nconst initialState = {\n  angle: 45,\n  gameState: initialGameState,\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case LEADERBOARD_LOADED:\n      return {\n        ...state,\n        players: action.players,\n      };\n    case LOGGED_IN:\n      return {\n        ...state,\n        currentPlayer: action.player,\n      };\n    case MOVE_OBJECTS:\n     // return moveObjects(state, action);\n    case START_GAME:\n      //return startGame(state, initialGameState);\n    case SHOOT:\n     // return shoot(state, action);\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers';\n\n//import { Router, browserHistory } from 'react-router';  \n//import routes from './routes';\n\n//import registerServiceWorker from './registerServiceWorker';\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(\n  reducer, /* preloadedState, */\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\n/* eslint-enable */\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n\n//ReactDOM.render(<Router history={browserHistory} routes={routes} />, document.querySelector('#app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}