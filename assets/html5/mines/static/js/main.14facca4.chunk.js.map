{"version":3,"sources":["screen/StartScreen.js","component/Cell.js","component/gameBoard.js","screen/GameScreen.js","screen/EndScreen.js","App.js","serviceWorker.js","actions/index.js","reducers/index.js","index.js"],"names":["StartScreen","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","height","width","mines","handleGameStart","difficulty","document","querySelector","value","console","log","JSON","stringify","handleClick","react_default","a","createElement","className","id","onClick","Component","Cell","ref","node","setState","clientRect","getBoundingClientRect","isRevealed","isMine","neighbour","isFlagged","s","getCellWH","defineProperty","style","onContextMenu","cMenu","getValue","Board","boardData","initBoardData","gameWon","mineCount","data","mineArray","map","datarow","dataitem","push","dimension","Math","floor","random","i","j","x","y","isEmpty","plantMines","getNeighbours","randomx","randomy","minesPlanted","getRandomNumber","_this2","updatedData","mine","traverseBoard","el","_this3","revealEmpty","win","revealBoard","alert","getHidden","length","gameWin","getFlags","e","preventDefault","getMines","FlagArray","_this4","key","Cell_Cell","handleCellClick","_handleContextMenu","nextProps","minWidth","getstyle","renderBoard","React","GameScreen","wongame","handleGameEnd","_ref","gameBoard_Board","bind","EndScreen","handleGameReStart","playNextGame","msg","App","screen","changeState","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","LEADERBOARD_LOADED","LOGGED_IN","MOVE_OBJECTS","START_GAME","SHOOT","initialState","angle","gameState","started","kills","lives","flyingObjects","lastObjectCreatedAt","Date","currentPlayer","players","cannonBalls","reducer","arguments","undefined","action","type","objectSpread","player","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.14facca4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class StartScreen extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n   state = {\r\n        height: 8,\r\n        width: 8,\r\n        mines: 10,\r\n    };\r\n\r\n    handleGameStart = () => {\r\n        let difficulty = document.querySelector(\"#level_select\");\r\n        if (difficulty.value === \"beginner\") {\r\n            /*this.setState({\r\n                height: 8,\r\n                width: 8,\r\n                mines: 10,\r\n            });*/\r\n            this.state = {\r\n                height: 8,\r\n                width: 8,\r\n                mines: 10,\r\n            }\r\n        }\r\n        if (difficulty.value === \"intermediate\") {\r\n            /*this.setState({\r\n                height: 12,\r\n                width: 12,\r\n                mines: 20,\r\n            });*/\r\n            this.state = {\r\n                height: 12,\r\n                width: 12,\r\n                mines: 20,\r\n            };\r\n        }\r\n        if (difficulty.value === \"expert\") {\r\n            /*this.setState({\r\n                height: 16,\r\n                width: 16,\r\n                mines: 40,\r\n            });*/\r\n            this.state = {\r\n                height: 16,\r\n                width: 16,\r\n                mines: 40,\r\n            }\r\n        }\r\n        console.log('selected level ' +difficulty.value + \" state data as \" + JSON.stringify(this.state)) ;\r\n        this.props.handleClick('GameScreen',this.state);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div className=\"gameStart\">\r\n            <div className=\"game-info\">\r\n                <div className=\"instructions\">\r\n                    <h4>Rules</h4>\r\n                    <p>You are presented with a board of squares. Some squares contain mines (bombs), others don't. If you click on a square containing a bomb, you lose. If you manage to click all the squares (without clicking on any bombs) or flag all the mines, you win.</p>\r\n                    <p>Clicking a square which doesn't have a bomb reveals the number of neighbouring squares containing bombs. Use this information plus some guess work to avoid the bombs.</p>\r\n                    <p>To open a square, point at the square and click on it. To mark a square you think is a bomb, point and right-click.</p>\r\n                </div>\r\n               <h4>Select a level and click \"start\"</h4>\r\n                <span className=\"info\">Level:\r\n                    <select id=\"level_select\">\r\n                        <option value=\"beginner\"> Beginner </option>\r\n                        <option value=\"intermediate\"> Intermediate </option>\r\n                        <option value=\"expert\"> Expert </option>\r\n                    </select>\r\n                </span>\r\n                <br/><br/><br/><br/>\r\n                <button className='screen-button' onClick={this.handleGameStart}>Start</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\n\nexport default class Cell extends Component {\n\n    constructor(props) {\n        super(props);\n    \n        this.state = {\n          clientRect: {},\n        };\n      }\n    //s = {width:'4%', height:'4vh'};\n    ref = node => node && this.setState({clientRect: node.getBoundingClientRect()});\n\n    getValue(){\n\n        \n\n        //{\"x\":8,\"y\":8,\"width\":50,\"height\":50,\"top\":8,\"right\":58,\"bottom\":58,\"left\":8}\n        const shape = \"🚩\";\n        //<svg><rect x={0} y={0}  width={this.state.clientRect.width} height={this.state.clientRect.height} fill=\"olive\" /></svg>;\n        //<svg><circle cx={this.state.clientRect.width/2} cy={this.state.clientRect.height/2} r={this.state.clientRect.width/2} fill=\"red\" /></svg>;\n        //<svg><rect x={0} y={0}  width={this.state.clientRect.width} height={this.state.clientRect.height} fill=\"olive\" /></svg>;\n        //<svg><rect x={0} y={0}  width={25} height={25} fill=\"red\" /></svg>;\n        //<svg><circle cx={10} cy={10} r={10} fill=\"red\" /></svg>;\n        if (!this.props.value.isRevealed){\n            return this.props.value.isFlagged ? shape : null;\n        }\n        if (this.props.value.isMine) {\n            return shape;\n            //\"🚩\"\n        }\n        if(this.props.value.neighbour === 0 ){\n            return null;\n        }\n        return this.props.value.neighbour;\n    }\n    \n    getCellWH(){\n        let s = {width:'4%', height:'4vh'};\n\n        if(this.props.value.width === 8){\n            this.s= {width:'12%', height:'10vh'};\n        } else if(this.props.value.width === 12){\n            this.s= {width:'8%', height:'7vh'};\n        } else if(this.props.value.width === 16){\n            this.s= {width:'6%', height:'5vh'};\n        } \n        return this.s;\n    }\n\n    render(){\n        let className = \"cell\" + (this.props.value.isRevealed ? \"\" : \" hidden\") + (this.props.value.isMine ? \" is-mine\" : \"\") + (this.props.value.isFlagged ? \" is-flag\" : \"\");\n        //className = \"cell is-mine\";\n        //const w='3%';//100/this.props.width+'%';\n       // const h='3vh';//100/this.props.height+\"vh\";\n        const s = this.getCellWH();//{width:w, height:h};\n        return (\n            <div style={s} ref=\"cell\" onClick={this.props.onClick} className={className} onContextMenu={this.props.cMenu} ref={this.ref}>\n                {this.getValue()}\n            </div>\n        );\n    }\n}\n","import React from 'react';\r\nimport Cell from './Cell';\r\n\r\nexport default class Board extends React.Component {\r\n    state = {\r\n        boardData: this.initBoardData(this.props.height, this.props.width, this.props.mines),\r\n        gameWon: false,\r\n        mineCount: this.props.mines,\r\n    };\r\n\r\n    /* Helper Functions */\r\n\r\n    // get mines\r\n    getMines(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isMine) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Flags\r\n    getFlags(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (dataitem.isFlagged) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get Hidden cells\r\n    getHidden(data) {\r\n        let mineArray = [];\r\n\r\n        data.map(datarow => {\r\n            datarow.map((dataitem) => {\r\n                if (!dataitem.isRevealed) {\r\n                    mineArray.push(dataitem);\r\n                }\r\n            });\r\n        });\r\n\r\n        return mineArray;\r\n    }\r\n\r\n    // get random number given a dimension\r\n    getRandomNumber(dimension) {\r\n        // return Math.floor(Math.random() * dimension);\r\n        return Math.floor((Math.random() * 1000) + 1) % dimension;\r\n    }\r\n\r\n    // Gets initial board data\r\n    initBoardData(height, width, mines) {\r\n        let data = [];\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            data.push([]);\r\n            for (let j = 0; j < width; j++) {\r\n                data[i][j] = {\r\n                    x: i,\r\n                    y: j,\r\n                    isMine: false,\r\n                    neighbour: 0,\r\n                    isRevealed: false,\r\n                    isEmpty: false,\r\n                    isFlagged: false,\r\n                    width:this.props.width,\r\n                    height:this.props.height,\r\n                };\r\n            }\r\n        }\r\n        data = this.plantMines(data, height, width, mines);\r\n        data = this.getNeighbours(data, height, width);\r\n        console.log(data);\r\n        return data;\r\n    }\r\n\r\n    // plant mines on the board\r\n    plantMines(data, height, width, mines) {\r\n        let randomx, randomy, minesPlanted = 0;\r\n\r\n        while (minesPlanted < mines) {\r\n            randomx = this.getRandomNumber(width);\r\n            randomy = this.getRandomNumber(height);\r\n            if (!(data[randomx][randomy].isMine)) {\r\n                data[randomx][randomy].isMine = true;\r\n                minesPlanted++;\r\n            }\r\n        }\r\n\r\n        return (data);\r\n    }\r\n\r\n    // get number of neighbouring mines for each board cell\r\n    getNeighbours(data, height, width) {\r\n        let updatedData = data, index = 0;\r\n\r\n        for (let i = 0; i < height; i++) {\r\n            for (let j = 0; j < width; j++) {\r\n                if (data[i][j].isMine !== true) {\r\n                    let mine = 0;\r\n                    const area = this.traverseBoard(data[i][j].x, data[i][j].y, data);\r\n                    area.map(value => {\r\n                        if (value.isMine) {\r\n                            mine++;\r\n                        }\r\n                    });\r\n                    if (mine === 0) {\r\n                        updatedData[i][j].isEmpty = true;\r\n                    }\r\n                    updatedData[i][j].neighbour = mine;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (updatedData);\r\n    };\r\n\r\n    // looks for neighbouring cells and returns them\r\n    traverseBoard(x, y, data) {\r\n        const el = [];\r\n\r\n        //up\r\n        if (x > 0) {\r\n            el.push(data[x - 1][y]);\r\n        }\r\n\r\n        //down\r\n        if (x < this.props.height - 1) {\r\n            el.push(data[x + 1][y]);\r\n        }\r\n\r\n        //left\r\n        if (y > 0) {\r\n            el.push(data[x][y - 1]);\r\n        }\r\n\r\n        //right\r\n        if (y < this.props.width - 1) {\r\n            el.push(data[x][y + 1]);\r\n        }\r\n\r\n        // top left\r\n        if (x > 0 && y > 0) {\r\n            el.push(data[x - 1][y - 1]);\r\n        }\r\n\r\n        // top right\r\n        if (x > 0 && y < this.props.width - 1) {\r\n            el.push(data[x - 1][y + 1]);\r\n        }\r\n\r\n        // bottom right\r\n        if (x < this.props.height - 1 && y < this.props.width - 1) {\r\n            el.push(data[x + 1][y + 1]);\r\n        }\r\n\r\n        // bottom left\r\n        if (x < this.props.height - 1 && y > 0) {\r\n            el.push(data[x + 1][y - 1]);\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n    // reveals the whole board\r\n    revealBoard() {\r\n        let updatedData = this.state.boardData;\r\n        updatedData.map((datarow) => {\r\n            datarow.map((dataitem) => {\r\n                dataitem.isRevealed = true;\r\n            });\r\n        });\r\n        this.setState({\r\n            boardData: updatedData\r\n        })\r\n    }\r\n\r\n    /* reveal logic for empty cell */\r\n    revealEmpty(x, y, data) {\r\n        let area = this.traverseBoard(x, y, data);\r\n        area.map(value => {\r\n            if (!value.isRevealed && (value.isEmpty || !value.isMine)) {\r\n                data[value.x][value.y].isRevealed = true;\r\n                if (value.isEmpty) {\r\n                    this.revealEmpty(value.x, value.y, data);\r\n                }\r\n            }\r\n        });\r\n        return data;\r\n\r\n    }\r\n\r\n    // Handle User Events\r\n\r\n    handleCellClick(x, y) {\r\n        let win = false;\r\n\r\n        // check if revealed. return if true.\r\n        if (this.state.boardData[x][y].isRevealed) return null;\r\n\r\n        // check if mine. game over if true\r\n        if (this.state.boardData[x][y].isMine) {\r\n            this.revealBoard();\r\n            alert(\"game over\");\r\n        }\r\n\r\n        let updatedData = this.state.boardData;\r\n        updatedData[x][y].isFlagged = false;\r\n        updatedData[x][y].isRevealed = true;\r\n\r\n        if (updatedData[x][y].isEmpty) {\r\n            updatedData = this.revealEmpty(x, y, updatedData);\r\n        }\r\n\r\n        if (this.getHidden(updatedData).length === this.props.mines) {\r\n            win = true;\r\n            this.revealBoard();\r\n            this.props.gameWin(true);\r\n            alert(\"You Win\");\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: this.props.mines - this.getFlags(updatedData).length,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    _handleContextMenu(e, x, y) {\r\n        e.preventDefault();\r\n        let updatedData = this.state.boardData;\r\n        let mines = this.state.mineCount;\r\n        let win = false;\r\n\r\n        // check if already revealed\r\n        if (updatedData[x][y].isRevealed) return;\r\n\r\n        if (updatedData[x][y].isFlagged) {\r\n            updatedData[x][y].isFlagged = false;\r\n            mines++;\r\n        } else {\r\n            updatedData[x][y].isFlagged = true;\r\n            mines--;\r\n        }\r\n\r\n        if (mines === 0) {\r\n            const mineArray = this.getMines(updatedData);\r\n            const FlagArray = this.getFlags(updatedData);\r\n            win = (JSON.stringify(mineArray) === JSON.stringify(FlagArray));\r\n            if (win) {\r\n                this.revealBoard();\r\n                this.props.gameWin(true);\r\n                alert(\"You Win\");\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            boardData: updatedData,\r\n            mineCount: mines,\r\n            gameWon: win,\r\n        });\r\n    }\r\n\r\n    renderBoard(data) {\r\n        return data.map((datarow) => {\r\n            return datarow.map((dataitem) => {\r\n                return (\r\n                    <div key={dataitem.x * datarow.length + dataitem.y}>\r\n                        <Cell\r\n                            onClick={() => this.handleCellClick(dataitem.x, dataitem.y)}\r\n                            cMenu={(e) => this._handleContextMenu(e, dataitem.x, dataitem.y)}\r\n                            value={dataitem}\r\n                        />\r\n                        {(datarow[datarow.length - 1] === dataitem) ? <div className=\"clear\" /> : \"\"}\r\n                    </div>);\r\n            })\r\n        });\r\n\r\n    }\r\n    // Component methods\r\n    componentWillReceiveProps(nextProps) {\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                boardData: this.initBoardData(nextProps.height, nextProps.width, nextProps.mines),\r\n                gameWon: false,\r\n                mineCount: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n    getstyle(){\r\n        let s = {minWidth:'200px'};\r\n        if(this.props.width === 8){\r\n            s = {minWidth:'450px'};\r\n        } else if(this.props.width === 12){\r\n            s = {minWidth:'450px'};\r\n        } else if(this.props.width === 16){\r\n            s = {minWidth:'450px'};\r\n        } \r\n        return s\r\n    }\r\n\r\n    render() {\r\n        const s=this.getstyle();\r\n        return (\r\n            <div className=\"board\">\r\n                {/*<div className=\"game-info\">\r\n                    <span className=\"info\">mines: {this.state.mineCount}</span><br />\r\n                    <span className=\"info\">{this.state.gameWon ? \"You Win\" : \"\"}</span>\r\n        </div>*/}\r\n        <div className='start'></div><div className='board' style={s}>{ this.renderBoard(this.state.boardData)}</div><div className='end'></div></div>\r\n            \r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport GameBoard from '../component/gameBoard';\r\n//import PathFinder from '../component/PathFinder';\r\n\r\nexport default class GameScreen extends Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        height: 8,\r\n        width: 8,\r\n        mines: 10,\r\n        wongame: false,\r\n    };\r\n\r\n   wongame = (data) => {\r\n        this.state.wongame = data;\r\n   }\r\n\r\n    handleGameEnd = () => {\r\n        this.props.handleClick('EndScreen',this.state);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        console.log('data from parane' + JSON.stringify(nextProps))\r\n        if (JSON.stringify(this.props) !== JSON.stringify(nextProps)) {\r\n            this.setState({\r\n                height: nextProps.height,\r\n                width: nextProps.width,\r\n                mines: nextProps.mines,\r\n            });\r\n        }\r\n    }\r\n\r\n    render(){\r\n        const { height, width, mines } = (this.props.data) ? this.props.data : this.state;\r\n        console.log('data from parent is ' + JSON.stringify(this.props.data))\r\n        return (\r\n            <div className=\"game\">\r\n            <div className=\"game-info\">\r\n               <GameBoard height={height} width={width} mines={mines} gameWin={this.wongame.bind(this)}/>\r\n               <br/><br/>\r\n                <button className='screen-button'  onClick={this.handleGameEnd}>End</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nexport default class EndScreen extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    handleGameReStart = () => {\r\n        this.props.handleClick('StartScreen')\r\n    }\r\n    playNextGame = () => {\r\n        this.props.handleClick('GameScreen')\r\n    }\r\n   \r\n    render(){\r\n        const msg = this.props.data.wongame ? 'Congratulations You win' : 'OOOps you loos';\r\n        return (\r\n           \r\n            <div className=\"gameEnd\">\r\n            <div className=\"game-info\">\r\n                <div className=\"instructions\">\r\n                    <h4>{msg}</h4>\r\n                    <p>Click on Play Next to try Again. Or Restart and select the game level and continue again.</p>\r\n                </div>\r\n                <br/><br/><br/><br/>\r\n                <button className='screen-button' onClick={this.playNextGame}>Play Next</button>\r\n                <button className='screen-button' onClick={this.handleGameReStart}>Restart</button>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport StartScreen from './screen/StartScreen';\nimport GameScreen from './screen/GameScreen';\nimport EndScreen from './screen/EndScreen';\n\nclass App extends Component {\n\n    state = {\n        screen:StartScreen,\n        data : {}\n    };\n\n    constructor(props){\n        super(props);\n    }\n\n    changeState(screen,data){\n        console.log('data ' + JSON.stringify(data));\n        switch(screen){\n            case \"StartScreen\":\n                this.state.screen = StartScreen;\n                this.state.data = data;\n                break;\n            case \"EndScreen\":\n                this.state.screen = EndScreen;\n                this.state.data = data;\n                break;\n            case \"GameScreen\":\n                this.state.screen = GameScreen;\n                this.state.data = data;\n                break;\n        }\n        this.setState(this.state);\n    }\n\n    render() {\n        return (\n        <center>\n            < this.state.screen handleClick={this.changeState.bind(this)} data={this.state.data} />\n        </center>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const LEADERBOARD_LOADED = 'LEADERBOARD_LOADED';\nexport const LOGGED_IN = 'LOGGED_IN';\nexport const MOVE_OBJECTS = 'MOVE_OBJECTS';\nexport const START_GAME = 'START_GAME';\nexport const SHOOT = 'SHOOT';\n\nexport const leaderboardLoaded = players => ({\n  type: LEADERBOARD_LOADED,\n  players,\n});\n\nexport const loggedIn = player => ({\n  type: LOGGED_IN,\n  player,\n});\n\nexport const moveObjects = mousePosition => ({\n  type: MOVE_OBJECTS,\n  mousePosition,\n});\n\nexport const startGame = () => ({\n  type: START_GAME,\n});\n\nexport const shoot = (mousePosition) => ({\n  type: SHOOT,\n  mousePosition,\n});\n","import {\n  LEADERBOARD_LOADED, LOGGED_IN,\n  MOVE_OBJECTS, SHOOT, START_GAME\n} from '../actions';\n//import moveObjects from './moveObjects';\n//import startGame from './startGame';\n//import shoot from './shoot';\n\nconst initialGameState = {\n  started: false,\n  kills: 0,\n  lives: 3,\n  flyingObjects: [],\n  lastObjectCreatedAt: new Date(),\n  currentPlayer: null,\n  players: null,\n  cannonBalls: [],\n};\n\nconst initialState = {\n  angle: 45,\n  gameState: initialGameState,\n};\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case LEADERBOARD_LOADED:\n      return {\n        ...state,\n        players: action.players,\n      };\n    case LOGGED_IN:\n      return {\n        ...state,\n        currentPlayer: action.player,\n      };\n    case MOVE_OBJECTS:\n     // return moveObjects(state, action);\n    case START_GAME:\n      //return startGame(state, initialGameState);\n    case SHOOT:\n     // return shoot(state, action);\n    default:\n      return state;\n  }\n}\n\nexport default reducer;\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport * as serviceWorker from './serviceWorker';\nimport reducer from './reducers';\n\n//import { Router, browserHistory } from 'react-router';  \n//import routes from './routes';\n\n//import registerServiceWorker from './registerServiceWorker';\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(\n  reducer, /* preloadedState, */\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\n/* eslint-enable */\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.register();\n\n//ReactDOM.render(<Router history={browserHistory} routes={routes} />, document.querySelector('#app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}